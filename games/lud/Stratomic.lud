(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next ("CastingAndMovingPieces"))))) )
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "CaptureToPieceAndResetCounter"
    (apply 
        (if (is Enemy (who at:(to)))
            (and
                (if (and (not ("AuthorisedToLaunch")) (!= (id "Pawn" Next) (what at:(to))))
                    (set Var "NonPawnPieceCapture" 1)
                )
                (remove 
                    (to) 
                    (then (set Counter))
                )
            )
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not (is Threatened (id "King" Mover) at:(to) (forEach Piece)) )
    )   
)

(define "DecideToCastle"
    (move
        Slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide 
        Forward 
        (between (exact 2) if:(is Empty (between))) 
        (to if:(is Empty (to))) 
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move
        Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (and
                (if (and (not ("AuthorisedToLaunch")) (!= (id "Pawn" Next) (what at:(ahead (last To) Backward))))
                    (set Var "NonPawnPieceCapture" 1)
                )
                (remove 
                    (ahead (last To) Backward)
                )
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:(is Enemy (who at:(to))) 
            (apply
                (and
                    (if (and (not ("AuthorisedToLaunch")) (!= (id "Pawn" Next) (what at:(to))))
                        (set Var "NonPawnPieceCapture" 1)
                    )
                    (remove (to))
                )
            )
        )
    )
)

(define "CastingAndMovingPieces"
    (or
        (forEach Piece)
        (if (and 
                ("HasNeverMoved" "King")
                (not ("IsInCheck" "King" Mover (forEach Piece))) 
            )
            (or
                (if (and 
                        ("HasNeverMoved" "RookLeft")
                        (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                    )
                    "BigCastling"
                )
                (if (and 
                        ("HasNeverMoved" "RookRight")
                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                    )
                    "SmallCastling"
                )
            )
        )
    )
)

(define "AuthorisedToLaunch" 
    (= (var "NonPawnPieceCapture") 1)
)

//------------------------------------------------------------------------------

(game "Stratomic"  
    (players {(player N) (player S)})  
    (equipment { 
        (board (square 10)) 
        
        (piece "Pawn" Each 
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion")) 
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )
        
        (piece "Rook" Each 
            (move
                Slide 
                Orthogonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each 
            (move
                Step 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each 
            (move
                Slide 
                Diagonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Knight" Each 
            (move
                Leap 
                "KnightWalk" 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Queen" Each 
            (move
                Slide 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            ) 
        )
        
        (piece "NuclearBomb" Each
            (move
                Step 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        
        (map "King" {(pair 1 "F2") (pair 2 "E9")})
        (map "RookLeft" {(pair 1 "A2") (pair 2 "J9")})
        (map "RookRight" {(pair 1 "J2") (pair 2 "A9")})
        (regions "Promotion" P1 (sites Row 8))
        (regions "Promotion" P2 (sites Row 1))
    })  
    (rules 
        (start { 
            (place "Pawn1" (sites Row 2))
            (place "Pawn2" (sites Row 7))
            (place "NuclearBomb1" (sites {"A2" "J2"})) (place "Rook1" {"B2" "I2"} state:1) (place "Knight1" {"C2" "H2"}) (place "Bishop1" {"D2" "G2"}) (place "Queen1" coord:"E2") (place "King1" coord:"F2" state:1) 
            (place "NuclearBomb2" (sites {"A9" "J9"})) (place "Rook2" {"B9" "I9"} state:1) (place "Knight2" {"C9" "H9"}) (place "Bishop2" {"D9" "G9"}) (place "Queen2" coord:"F9") (place "King2" coord:"E9" state:1) 
        })
        
        (play 
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook" "NuclearBomb"}) Mover)
                (do 
                    (or 
                        (if ("AuthorisedToLaunch")
                            (move Select
                                (from (sites Occupied by:Mover component:"NuclearBomb") if:(not (is Threatened (id "NuclearBomb" Mover) at:(from) (forEach Piece)) ))
                                (to (sites Board))
                                (then
                                    (and
                                        (forEach Site (sites Around (last To) includeSelf:True)
                                            (if (and { (is Occupied (site)) (!= (what at:(site)) (id "King" P1)) (!= (what at:(site)) (id "King" P2)) })
                                                (remove (site))
                                            )
                                        )
                                        (remove (last From))
                                    )
                                )
                            ) 
                        )
                        ("CastingAndMovingPieces")
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover ("CastingAndMovingPieces")))
                )
            )
        )
        
        (end {
            (if (and 
                    ("IsInCheck" "King" Next ("CastingAndMovingPieces"))
                    ("NextCanNotMove")
                ) 
                (result Mover Win)
            ) 
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw)) 
        })
    )
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "Stratomic is a chess variant invented by Robert Montay-Marsais in 1972. The game is played on a 10Ã—10 board with all the standard chess pieces present, and in addition, two nuclea pieces (representing nuclear missiles) and two extra pawns per side. The game brings the concept of modern warfare weaponry to chess.")
        (rules "The standard conventions of chess apply, including normal castling and en passant. Pawns promote on the 9th ranks and may promote to missile. The missile moves and captures as a chess king: one step in any direction. It may be captured like any other piece.
            
            Missile launches
            A player can launch a missile at any time to any board square, occupied or not. The launched missile \"destroys\" (eliminates from play) all pieces (except kings, which are immune) of either colour on the target square, as well as on all immediately surrounding squares. The missile itself is also destroyed in the launch.
            
            Launching a missile constitutes a turn. There are two prerequisites for launching a missile:
            - A non-pawn piece must have been captured at some point prior in the game.
        - The missile cannot be under attack by an enemy piece at time of launch.")
        (id "1780")
        (source "<a href=\"https://en.wikipedia.org/wiki/Stratomic\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />Wikipedia</a>")
        (version "1.3.4")
        (classification "board/war/replacement/checkmate/chess")
        (author "Robert Montay-Marsais")
        (credit "Eric Piette")
        (date "1972")
        }
    )
    
    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })
    
)
