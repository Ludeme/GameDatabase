(define "Plant"
    (move Add
        (to 
            (sites Empty)
            if:(= 0
                (count Sites
                    in:(sites Around (to) Own Orthogonal)
                )
            )
        )
        (then ("UpdateScore"))
    )
)

(define "PlaceGrey"
    (do
        (move Add
            (piece "Marker0")
            (to
                (sites Empty)
                if:(< 0
                    (count Sites
                        in:(sites Around (to) Own Orthogonal)
                    )
                )
            )
        )
        ifAfterwards:(all Groups Orthogonal of:(is Mover (who at:(to)))
            if:(> 2
                (count Sites
                    in:(intersection
                        (sites Around (sites) NotEmpty Orthogonal)
                        (sites Occupied by:Neutral)
                    )
                )
            )
        )
        #1
    )
)

(define "ReplaceAllGrey"
    (add 
        (to 
            (sites Occupied by:Neutral)
            (apply (remove (to)))
        )
        (then 
            (if 
                (!= 1 (var "HasGrown"))
                (and
                    (set Var "HasGrown" 1)
                    (if 
                        (= (id P2) (mover))
                        (and
                            (set Var "MoveThatMustBePlant" (count Moves))
                            (moveAgain)
                        )
                    )
                )
            )
        )
    )
)

(define "Grow"
    ("PlaceGrey"
        (then 
            (if
                (can Move ("PlaceGrey" ~))
                (moveAgain)
                (do
                    ("ReplaceAllGrey")
                    next:("UpdateScore")
                )
            )
        )
    )
)

(define "UpdateScore"
    (set Score Mover
        (-
            (count Sites in:(sites Occupied by:Mover))
            (* <P>
                (count Groups Orthogonal if:(is Mover (who at:(to))))
            )
        )
    )
)

//-------------------------------------------------------------------------

(game "Symple"
    (players 2)
    (equipment
        {
        (board (square <Size>) use:Vertex)
        (piece "Marker" Each)
        (piece "Marker" Neutral)
        }
    )
    (rules
        (play
            (if
                (= (count Moves) (var "MoveThatMustBePlant"))
                ("Plant")
                (if
                    (= 0 (count MovesThisTurn))
                    (or
                        ("Plant")
                        ("Grow")
                    )
                    ("Grow")
                )
            )
        )
        (end 
            (if 
                (is Full) 
                (byScore)
            )
        )
    )
)

//-------------------------------------------------------------------------

(option "Board Size" <Size> args:{ <size> }
    {
    (item "7"    <7>  "A size 7 board is currently selected")
    (item "9"    <9>  "A size 9 board is currently selected")
    (item "11"    <11>  "A size 11 board is currently selected")
    (item "13"    <13>  "A size 13 board is currently selected")
    (item "15"    <15>  "A size 15 board is currently selected")
    (item "17"    <17>  "A size 17 board is currently selected")
    (item "19"    <19>  "A size 19 board is currently selected")*
    }
)

(option "Group Penalty" <P> args:{ <p> }
    {
    (item "0"    <0>  "A group penalty of 0 points is currently selected")
    (item "2"    <2>  "A group penalty of 2 points is currently selected")
    (item "4"    <4>  "A group penalty of 4 points is currently selected")
    (item "6"    <6>  "A group penalty of 6 points is currently selected")
    (item "8"    <8>  "A group penalty of 8 points is currently selected")
    (item "10"    <10>  "A group penalty of 10 points is currently selected")*
    (item "12"    <12>  "A group penalty of 12 points is currently selected")
    }
)

//-------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Symple is an abstract strategy game in which two players strive to get as much area as possible with as few groups as possible.")
    (rules "Players alternate making a move. White plays with the white stones and makes the first move, Black plays with the black stones. On his turn, a player may choose either a) to place a stone on the board without contact to other stones of his color in order to start a new group, or b) to grow all possible groups by one stone. When you grow your groups in this implementation, you place grey stones adjacent to your groups until each of your groups is adjacent to exactly one grey stone. At no point may a group of yours be adjacent to more than one grey stone. When your turn ends, all grey stones are replaced with stones of your color.
    
    For balancing, there is an extra rule: Black is allowed to grow all his groups and place a single stone as long as neither player has not yet grown any groups.
    
The game ends when the board is filled in. The score is the number of stones each player has on the board minus 'P' times the number of groups he has, where 'P' is en even number of 4 or higher (the Ludii implementation also allows 0 and 2 as values of 'P'). With an even penalty and an odd boardsize, draws are not possible.")
(id "1962")
(source "<a href=\"https://boardgamegeek.com/boardgame/106341/symple\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG</a>")
(version "1.3.4")
(classification "board/space/group")
(author "Christian Feeling, Benedick Rosenau")
(credit "Michael Amundsen")
(date "2010")
}
)

(graphics {
    (player Colour P1 (colour White))
    (player Colour P2 (colour Black))
    (player Colour Neutral (colour Grey))
    (board Colour InnerEdges (colour 178 151 100))
    (board Colour OuterEdges (colour 178 151 100))
    (board Colour Phase0 (colour 250 210 148))
    (board Colour Phase1 (colour 250 210 148))
    (board Style Board)
})
)
