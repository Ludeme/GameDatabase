(game "Jumping Beans"
    (players 2)
    (equipment {
        (board (square 7))
        (piece "Bean" Each
            (move Step (to if:(is Empty (to))))
        )
    })
    (rules
        (start {
            (place "Bean1" (forEach (sites Board) if:(< (site) (centrePoint))))
            (place "Bean2" (forEach (sites Board) if:(> (site) (centrePoint))))
        })
        
        (play 
            (if (is Prev Mover)
                (max Moves
                    (move Hop
                        (from (last To))
                        (between if:(is Enemy (who at:(between))))
                        (to if:(is Empty (to))
                            (apply 
                                (remove (between))
                            )
                        )
                        (then
                            (if (can Move
                                    (hop
                                        (from (last To))
                                        (between if:(is Enemy (who at:(between))))
                                        (to if:(is Empty (to)))
                                    )
                                )
                                (moveAgain)
                            )
                        )
                    )
                )
                (priority {
                    (max Moves
                        (forEach Piece
                            (move Hop
                                (between if:(is Enemy (who at:(between))))
                                (to if:(is Empty (to))
                                    (apply 
                                        (remove (between))
                                    )
                                )
                                (then
                                    (if (can Move
                                            (hop
                                                (from (last To))
                                                (between if:(is Enemy (who at:(between))))
                                                (to if:(is Empty (to)))
                                            )
                                        )
                                        (moveAgain)
                                    )
                                )
                            )
                        )
                    )
                    (forEach Piece)
                })
            )
        )
        
        (end (if (or
                    (no Pieces Next) 
                    (and
                        (= 1 (count Pieces Mover))
                        (= (centrePoint) (where "Bean" Mover))
                    )
                )
                (result Mover Win)
            )
        )
    )
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "This game is played on a 7x7 square board.")
        (rules "MOVE - Stones may move to an adjacent (orthogonal or diagonal) empty cell.
            
            CAPTURE - Stones capture by jumping over an enemy stone and landing in the immediate opposite empty cell.
            - Captures are mandatory.
            - Captures are multiple and the player must choose the jumping sequence that captures more enemy stones.
            
        GOAL - A player wins when it captures all enemy stones, or when he moves his last remaining stone to the center cell.")
        (id "1816")
        (source "<a href=\"http://www.di.fc.ul.pt/~jpn/gv/jumpingbeans.htm\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />www.di.fc.ul.pt</a>")
        (version "1.3.4")
        (classification "board/war/leaping/orthogonal")
        (author "Chris Huntoon")
        (credit "Eric Piette")
        (date "2001")
        }
    )
    
    (graphics {
        (player Colour P1 (colour Green))
        (player Colour P2 (colour Red))
        (board Colour Phase0 (colour 223 178 110))
        (show Symbol "Atom" (sites Centre) fillColour:(colour Yellow) edgeColour:(colour Black))
        (board Colour OuterEdges (colour Hidden))
        (board Colour InnerEdges (colour Black))
    })
    
)
