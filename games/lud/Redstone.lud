(define "SomeSite"
    (not
        (all Sites #1 
            if:(not #2)
        )
    )
)

(define "PlaceRed"
    (do
        (move Add (piece "Disc0")
            (to (sites Empty))
        )
        ifAfterwards:(or
            ("SomeSite"
                (sites Around (last To) Enemy Orthogonal)
                (= 0 
                    (count Liberties at:(site) Orthogonal
                        if:(is Next (who at:(to)))
                    )
                )
            )
            ("SomeSite"
                (sites Around (last To) Own Orthogonal)
                (= 0 
                    (count Liberties at:(site) Orthogonal
                        if:(is Mover (who at:(to)))
                    )
                )
            )
        )
        (then
            (and
                (forEach Site
                    (sites Around (last To) Enemy Orthogonal)
                    (if
                        (= 0 
                            (count Liberties at:(site) Orthogonal
                                if:(is Next (who at:(to)))
                            )
                        )
                        (remove (sites Group at:(site) Orthogonal if:(is Next (who at:(to)))))
                    )
                )
                (forEach Site
                    (sites Around (last To) Own Orthogonal)
                    (if
                        (= 0 
                            (count Liberties at:(site) Orthogonal
                                if:(is Mover (who at:(to)))
                            )
                        )
                        (remove (sites Group at:(site) Orthogonal if:(is Mover (who at:(to)))))
                    )
                )
            )
        )
    )
)

(define "PlaceNonRed"
    (do
        (move Add 
            (to (sites Empty))
        )
        ifAfterwards:(not
            (or
                ("SomeSite"
                    (sites Around (last To) Enemy Orthogonal)
                    (= 0 
                        (count Liberties at:(site) Orthogonal
                            if:(is Next (who at:(to)))
                        )
                    )
                )
                ("SomeSite"
                    (sites Around (last To) Own Orthogonal includeSelf:True)
                    (= 0 
                        (count Liberties at:(site) Orthogonal
                            if:(is Mover (who at:(to)))
                        )
                    )
                )
            )
        )
    )
)

//------------------------------------------------------------------------------

(game "Redstone"
    (players 2)
    (equipment
        {
        (board (square <Size>) use:Vertex)
        (piece "Disc" Each)
        (piece "Disc" Neutral)
        }
    )
    (rules
        (meta (swap))
        (play
            (or
                ("PlaceRed")
                ("PlaceNonRed")
            )
        )
        (end {
            (if 
                (and (> (count Moves) 2) (no Pieces Next))
                (result Next Loss)
            )
            (if 
                (and {(> (count Moves) 2) (no Pieces Mover) (not (no Pieces Next))})
                (result Mover Loss)
            )
        })
    )
)

//------------------------------------------------------------------------------

(option "Board Size" <Size> args:{ <size> }
    {
    (item "5"    <5>  "A size 5 board is currently selected")
    (item "6"    <6>  "A size 6 board is currently selected")
    (item "7"    <7>  "A size 7 board is currently selected")
    (item "8"    <8>  "A size 8 board is currently selected")
    (item "9"    <9>  "A size 9 board is currently selected")
    (item "10"    <10>  "A size 10 board is currently selected")
    (item "11"    <11>  "A size 11 board is currently selected")
    (item "12"    <12>  "A size 12 board is currently selected")
    (item "13"    <13>  "A size 13 board is currently selected")*
    (item "14"    <14>  "A size 14 board is currently selected")
    (item "15"    <15>  "A size 15 board is currently selected")
    (item "16"    <16>  "A size 16 board is currently selected")
    (item "17"    <17>  "A size 17 board is currently selected")
    (item "18"    <18>  "A size 18 board is currently selected")
    (item "19"    <19>  "A size 19 board is currently selected")
    }
)

//------------------------------------------------------------------------------

(metadata
    
    (info
        {
        (description "Redstone is a variation of Go in which red stones are used to capture. Red stones are permanent. They cannot themselves be captured. Draws cannot occur in Redstone. Mark Steere designed Redstone in February, 2012.")
        (rules "Starting with Black, the two players take turns placing stones onto unoccupied points on the board, subject to restrictions, one stone per turn.
            Passing is not allowed in Redstone. Players will always have a placement available and must make one.
            
            GROUPS AND LIBERTIES: 
            A group is an orthogonally interconnected collection of one or more like-colored stones. 
            Only black groups and white groups will be discussed here, not red groups. 
            A liberty is an unoccupied point adjacent to a (black or white) group
            
            CAPTURES:
            A capturing placement results in one or more groups, of either or both colors, having no liberties. 
            Such a placement can only be made with a red stone. 
            Conversely, a red stone can only be placed if it bounds (completely deprives of liberties) one or more groups of either or both colors. Red stones are permanent. They cannot themselves be captured.
            Self capture is allowed.
            
            When multiple groups without liberties result from a placement, all such groups are removed immediately following said placement, regardless of the groups' colors. Unlike Go, if you unbound your own temporarily bounded group by removing a neighboring enemy group, you must still remove your own temporarily bounded group.
            
            PIE RULE:
            Since Redstone is a game of annihilation, not of point score, Go’s komi can’t be used.
            Instead, Redstone uses the pie rule for balance. 
            
            OBJECT OF THE GAME:
            You must annihilate your opponent, removing all of his stones from the board. 
            If your placement eliminates all black and white stones from the board, you win. 
        If your placement eliminates all of your own stones while enemy stones remain on the board, you lose.")
        (id "1976")
        (source "<a href=\"https://boardgamegeek.com/boardgame/120533/redstone\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />BGG</a>")
        (version "1.3.4")
        (classification "board/space/territory")
        (author "Mark Steere")
        (publisher "Mark Steere Games")
        (credit "Michael Amundsen")
        (date "2012")
        }
    )
    
    (graphics {
        (player Colour P1 (colour Black))
        (player Colour P2 (colour White))
        (player Colour Neutral (colour Red))
        (board Colour InnerEdges (colour 178 151 100))
        (board Colour OuterEdges (colour 178 151 100))
        (board Colour Phase0 (colour 250 210 148))
        (board Colour Phase1 (colour 250 210 148))
        (board Style Board)
    })
)
