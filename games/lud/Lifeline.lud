(define "SomeSite"
    (not
        (all Sites #1 
            if:(not #2)
        )
    )
)

(define "Place"
    (move Add
        (to
            (sites Empty)
            if:(and
                (not (no Pieces Mover in:(sites Board)))
                (> 
                    Infinity
                    (count Steps Orthogonal
                        (step //Orthogonal
                            (to
                                if:(or 
                                    (is Empty (to)) 
                                    (is Mover (who at:(to)))
                                )
                            )
                        )
                        (to)
                        (sites Occupied by:Mover)
                    )
                )
            )
        )
        #1
    )
)

(define "ReachesPlayer"
    (and
        (< 0
            (count Sites 
                in:(difference
                    (sites Occupied by:#2 component:"Disc")
                    #1
                )
            )
        )
        ("SomeSite"
            #1
            (> Infinity
                (count Steps Orthogonal
                    (step //Orthogonal
                        (to
                            if:(or
                                (is Empty (to)) 
                                (is #2 (who at:(to)))
                            )
                        )
                    )
                    (site)
                    (difference
                        (sites Occupied by:#2)
                        #1
                    )
                )
            )
        )
    )
)

(define "Remove"
    (forEach Group Orthogonal if:(is #1 (who at:(to)))
        (if
            (not ("ReachesPlayer" (sites) #1))
            (remove (sites))
            (pass)
        )
        #2
    )
)

(define "SpendKomi"
    (if
        (and {
            (< 0 (size Stack at:(handSite P2)))
            (= (mover) (id P2))
            (< 0 (count Pieces Mover in:(sites Board)))
        })
        (move Remove (handSite P2))
    )
)

//------------------------------------------------------------------------------

(game "Lifeline"  
    (players 2) 
    (equipment 
        { 
        (board (dual <Board>)) //(board <Board> use:Vertex)
        (piece "Disc" Each) 
        (piece "Shi_Western" P2) //Alternative icons: paper, button-pass
        (hand P2)
        }
    )
    (rules 
        <Balance:pie>
        (start {
            (place Stack "Shi_Western2" (handSite P2) count:<Komi>) 
        })
        phases:{
        (phase "Opening"
            (play 
                (move Add 
                    (to 
                        (sites Empty)
                        if:(= 0
                            (count Sites in:(sites Around (to) Own Orthogonal))
                        )
                    )
                    <Balance:12*>
                )
            )
            (nextPhase 
                (and
                    (= 2 (count Sites in:(sites Occupied by:P1 component:"Disc")))
                    (= 2 (count Sites in:(sites Occupied by:P2 component:"Disc")))
                )
                "Play"
            )
        )
        (phase "Play"
            (play 
                (or
                    ("SpendKomi")
                    ("Place"
                        (then 
                            ("Remove" Enemy 
                                (then ("Remove" Mover ~))
                            )
                        )
                    )
                    <Balance:12*>
                )
            )
        )
        }
        (end 
            (if
                (no Moves Next)
                (result Next Loss)
            )
        )
    )
)

//------------------------------------------------------------------------------

(option "Balance" <Balance> args:{ <pie> <12*> }
    {
    (item "None"     <> <>                                                           "Neither the 12* protocol nor the pie rule is currently in force.")*
    (item "Pie"      <(meta (swap))> <>                                              "The pie rule is currently in force.")
    (item "12*"      <> <(then (if (= 1 (% (+ 1 (count Moves)) 2)) (moveAgain)))>    "The 12* placement protocol is in force.")
})

(option "Komi" <Komi> args:{ <komi> }
    {
    (item "0"      <0>    "White is rewarded no points of komi.")*
    (item "1"      <1>    "White is rewarded 1 point of komi for going second.")
    (item "2"      <2>    "White is rewarded 2 points of komi for going second.")
    (item "3"      <3>    "White is rewarded 3 points of komi for going second.")
    (item "4"      <4>    "White is rewarded 4 points of komi for going second.")
    (item "5"      <5>    "White is rewarded 5 points of komi for going second.")
    (item "6"      <6>    "White is rewarded 6 points of komi for going second.")
    (item "7"      <7>    "White is rewarded 7 points of komi for going second.")   
    (item "8"      <8>    "White is rewarded 8 points of komi for going second.")
    (item "9"      <9>    "White is rewarded 9 points of komi for going second.")   
    (item "10"    <10>    "White is rewarded 10 points of komi for going second.")
    (item "11"    <11>    "White is rewarded 11 points of komi for going second.")
    (item "12"    <12>    "White is rewarded 12 points of komi for going second.")
    (item "13"    <13>    "White is rewarded 13 points of komi for going second.")
    (item "14"    <14>    "White is rewarded 14 points of komi for going second.")
    (item "15"    <15>    "White is rewarded 15 points of komi for going second.")
})

(option "Board Size" <Board> args:{ <size> }
    {
    (item "3"    <(tri Hexagon 3)>    "A board of size 3 is currently selected.")
    (item "4"    <(tri Hexagon 4)>    "A board of size 4 is currently selected.")
    (item "5"    <(tri Hexagon 5)>    "A board of size 5 is currently selected.")
    (item "6"    <(tri Hexagon 6)>    "A board of size 6 is currently selected.")*
    (item "7"    <(tri Hexagon 7)>    "A board of size 7 is currently selected.")
    (item "8"    <(tri Hexagon 8)>    "A board of size 8 is currently selected.")
    (item "9"    <(tri Hexagon 9)>    "A board of size 9 is currently selected.")
    (item "10"    <(tri Hexagon 10)>  "A board of size 10 is currently selected.")
    (item "11"    <(tri Hexagon 11)>  "A board of size 11 is currently selected.")
    (item "12"    <(tri Hexagon 12)>  "A board of size 12 is currently selected.")
})

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "Lifeline is a territorial elimination game for two players. It was invented by Michael Amundsen and Luis Bolanos Mures in February 2022, and was inspired by Go and Kanare Kato's Meridians.")
        (rules "Lifeline is a territorial strategy game for two players (Black and White) that is played on the cells of a hexhex board. 
            The game was invented by Michael Amundsen and Luis Bola√±os Mures.
            
            Definitions
            A group is an entire set of connected stones of the same color. 
            A single stone, not connected to others of its color, is also a group.
            
            A group is dead if there is no path of connected empty cells between that group and any other of its color.
            
            Setup
            Starting with Black, the players take turns placing stones of their own color on empty cells, one stone per turn.
            The setup ends when each player has two stones on the board. These two stones must not be adjacent to each other.
            
            Play
            After the setup, the players continue taking turns in the same order. 
            On your turn, perform the following actions in the stated order:
            
            1. Place a stone of your color on an empty cell.
            2. Remove all dead enemy groups.
            3. Remove all dead friendly groups.
            
            The board positions at the start and at the end of your turn must be different.
            
            The last player to make a placement wins. Note that you will always have a placement available unless your turn starts with no groups of your color on the board.
            
            Optional meta-rules (for balance):
            The pie rule:
            When playing with the pie rule, White has the option to swap sides after Black's first move. If White chooses to swap, they become Black, and the player who started out as Black plays as White from the immediately next turn onwards.
            
            12* protocol:
            When playing with the 12* protocol, players make two placements each turn, except for Black's very first turn. To win you must be the last player to complete an entire turn by making both your placements.
            
            Komi:
            When playing with komi, a whole number of points is given to White as compensation for going second. 
            Instead of making a normal placement, White has the option to spend one point of komi.
            This has no other effect than reducing the number of points they have available to spend. This does not count as having made a placement, so you have lost if you have only pass-moves left while your opponent was the last player to place a stone.
            In this implementation, komi is spent by clicking the shield icon next to White's name.
            
        The 12* protocol and the pie rule cannot be combined in this implementation, but komi is compatible with either choice.")
        (id "1936")
        (version "1.3.4")
        (classification "board/space/territory")
        (author "Michael Amundsen and Luis Bolanos Mures")
        (credit "Michael Amundsen")
        (date "02-2022")
        }
    )
    
    (graphics {
        (player Colour P1 (colour Black))
        (player Colour P2 (colour White))
        (board Colour InnerEdges (colour 178 151 100))
        (board Colour OuterEdges (colour 178 151 100))
        (board Colour Phase0 (colour 250 210 148))
        (board Colour Phase1 (colour 250 210 148))
        (board Style Board)
        (stackType Count)
    })
)
