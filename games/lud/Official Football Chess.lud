(define "NextCanNotMove"
    (not (can Move (do (forEach Piece Next) ifAfterwards:(not ("IsInCheck" "King" Next)))) )
)

(define "HasNeverMoved"
    (= (state at:(mapEntry #1 (mover))) 1) 
)

(define "PieceHasMoved"
    (set State at:#1 0) 
)

(define "RememberPieceHasMoved"
    (then 
        (if 
            (= (state at:(last To)) 1) 
            ("PieceHasMoved" (last To))
        ) 
    ) 
)

(define "CaptureToPieceAndResetCounter"
    (apply 
        (if (is Enemy (who at:(to)))
            (remove 
                (to) 
                (then (set Counter))
            )
        )
    ) 
)

(define "KingNotCheckedAndToEmpty"
    (and 
        (is Empty (to)) 
        (not ("IsInCheck" "King" Mover at:(to)))
    )   
)

(define "DecideToCastle"
    (move
        Slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
        #5
    )
)

(define "CastleRook"
    (slide 
        (from (mapEntry #1 (mover))) 
        #2 
        (between 
            (exact #3) 
            if:#4
        ) 
        (to 
            if:True
            (apply ("PieceHasMoved" (from)))
        )
    )
)

(define "SmallCastling"
    ("DecideToCastle" "King" E 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookRight" W 2 True)))
)

(define "BigCastling"
    ("DecideToCastle" "King" W 2 "KingNotCheckedAndToEmpty" (then ("CastleRook" "RookLeft" E 3 True)))
)

(define "SetEnPassantLocation"
    (then 
        (set Pending (ahead (last To) Backward))
    )
)

(define "DoubleStep"
    (move
        Slide 
        Forward 
        (between (exact 2) if:(is Empty (between))) 
        (to if:(is Empty (to))) 
        "SetEnPassantLocation"
    )
)

(define "InLocationEnPassant"
    (and 
        (is Pending) 
        (= (to) (value Pending)) 
    )
)

(define "EnPassant"
    (move
        Step 
        (directions {FR FL}) 
        (to if:"InLocationEnPassant") 
        (then 
            (remove 
                (ahead (last To) Backward)
            )
        )
    )
)

(define "CaptureForwardDiagonal"
    (move
        Step 
        (directions {FR FL}) 
        (to 
            if:(is Enemy (who at:(to))) 
            (apply (remove (to)))
        )
    )
)

//------------------------------------------------------------------------------

(game "Official Football Chess"  
    (players {(player N) (player S)})  
    (equipment { 
        (board (square 8)) 
        
        (piece "Pawn" Each 
            (or {
                (if (is In (from) (sites Start (piece (what at:(from)))))
                    "DoubleStep"
                )
                "StepForwardToEmpty" 
                "CaptureForwardDiagonal"
                "EnPassant"
                }
                (then
                    (and
                        (if (is In (last To) (sites Mover "Promotion")) 
                            (moveAgain)
                        )
                        (set Counter)
                    )
                )
            )
        )
        
        (piece "Rook" Each 
            (move
                Slide 
                Orthogonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
                "RememberPieceHasMoved"
            )
        )
        (piece "King" Each 
            (move
                Step 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
                "RememberPieceHasMoved"
            )
        )
        (piece "Bishop" Each 
            (move
                Slide 
                Diagonal 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Knight" Each 
            (move
                Leap 
                "KnightWalk" 
                (to 
                    if:(not (is Friend (who at:(to)))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            )
        )
        (piece "Queen" Each 
            (move
                Slide 
                (to 
                    if:(is Enemy (who at:(to))) 
                    "CaptureToPieceAndResetCounter"
                ) 
            ) 
        )
        
        (map "King" {(pair 1 "D1") (pair 2 "D8")})
        (map "RookLeft" {(pair 1 "A1") (pair 2 "A8")})
        (map "RookRight" {(pair 1 "H1") (pair 2 "H8")})
        (regions "Promotion" P1 (sites Top) )
        (regions "Promotion" P2 (sites Bottom) )
    })  
    (rules 
        (start { 
            (place "Pawn1" (sites {"B2" "C2" "E2" "F2"}))
            (place "Pawn2" (sites {"B7" "C7" "E7" "F7"}))
            (place "Rook1" {"A1" "H1"} state:1) (place "Knight1" {"D2"}) (place "Bishop1" {"A2" "H2"}) (place "Queen1" coord:"E1") (place "King1" coord:"D1" state:1) 
            (place "Rook2" {"A8" "H8"} state:1) (place "Knight2" {"D7"}) (place "Bishop2" {"A7" "H7"}) (place "Queen2" coord:"E8") (place "King2" coord:"D8" state:1) 
        })
        
        (play 
            (if "SameTurn"
                (move Promote (last To) (piece {"Queen" "Knight" "Bishop" "Rook"}) Mover)
                (do 
                    (or 
                        (forEach Piece)
                        (if (and 
                                ("HasNeverMoved" "King")
                                (not ("IsInCheck" "King" Mover)) 
                            )
                            (or
                                (if (and 
                                        ("HasNeverMoved" "RookLeft")
                                        (can Move ("CastleRook" "RookLeft" E 3 (is Empty (to))))
                                    )
                                    "BigCastling"
                                )
                                (if (and 
                                        ("HasNeverMoved" "RookRight")
                                        (can Move ("CastleRook" "RookRight" W 2 (is Empty (to))))
                                    )
                                    "SmallCastling"
                                )
                            )
                        )
                    )
                    ifAfterwards:(not ("IsInCheck" "King" Mover))
                )
            )
        )
        
        (end {
            (if (and 
                    ("IsInCheck" "King" Next)
                    ("NextCanNotMove")
                ) 
                (result Mover Win)
            ) 
            (if (or (no Moves Mover) (= (counter) 99)) (result Mover Draw)) 
        })
    )
)

//------------------------------------------------------------------------------

(metadata 
    
    (info
        {
        (description "In 1967, an US game company called Diversified Creations marketed a chess variant called Official Football Chess. ")
        (rules "Same rules as Chess, just a different setup.")
        (id "1792")
        (source "<a href=\"https://www.chessvariants.com/diffsetup.dir/officialfootball.html\" target=\"_blank\" class=\"style1\" style=\"color: #0000EE\" />www.chessvariants.com</a>")
        (version "1.3.4")
        (classification "board/war/replacement/checkmate/chess")
        (credit "Eric Piette")
        (date "1967")
        }
    )
    
    (graphics {
        (show Check "King")
        (piece Scale "Pawn" 0.825)
        (piece Families {"Defined" "Microsoft" "Pragmata" "Symbola"})
        (board Style Chess)
    })
    
)
