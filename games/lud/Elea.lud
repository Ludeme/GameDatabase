(define "UpdateScoreMoverAndMarkEvenGroups"
    (and
        (set Score Mover 0)
        (forEach Group Orthogonal
            if:(is Mover (who at:(to)))
            (if 
                (is Odd (count Sites in:(sites)))
                (and
                    (addScore Mover -1)
                    (forEach Site 
                        (sites)
                        (set State at:(site) 0)
                    )
                )
                (and
                    (addScore Mover -2)
                    (forEach Site 
                        (sites)
                        (set State at:(site) 1)
                    )
                )
            )
        )
    )
)

(define "MarkEvenGroups"
    (forEach Group Orthogonal
        if:(is Mover (who at:(to)))
        (if 
            (is Odd (count Sites in:(sites)))
            (forEach Site 
                (sites)
                (set State at:(site) 0)
            )
            (forEach Site 
                (sites)
                (set State at:(site) 1)
            )
        )
    )
)

(define "UpdateScoreMover"
    (and
        (set Score Mover 0)
        (forEach Group Orthogonal
            if:(is Mover (who at:(to)))
            (if 
                (is Odd (count Sites in:(sites)))
                (addScore Mover -1)
                (addScore Mover -2)
            )
        )
    )
)

//------------------------------------------------------------------------------

(game "Elea"
    (players 2)
    (equipment
        {
        (board (hex <Size>))
        (piece "Disc" Each)
        }
    )
    (rules
        (play
            (move Add
                (to (sites Empty))
                (then <Score>)
            )
        )
        (end 
            (if 
                (is Full) 
                (byScore)
            )
        )
    )
)

//------------------------------------------------------------------------------

(option "Visual aids" <Score> args:{ <score> }
    {
    (item "Show running score and mark even groups"  <("UpdateScoreMoverAndMarkEvenGroups")>  "The score is currently updated after each move, and groups of even size are marked with a red outline.")*
    (item "Show running score"  <("UpdateScoreMover")>  "The score is currently updated after each move, but the parity of group sizes is not marked on the stones.")
    (item "None" <(if (or (= 1 (count Sites in:(sites Empty))) (is Full)) ("UpdateScoreMover"))>  "The score is currently updated only when the board is full, and the parity of group sizes is not marked on the stones. (This makes the AI stronger.)")
    }
)

(option "Board Size" <Size> args:{ <size> }
    {
    (item "3"    <3>  "A size 3 board is currently selected")
    (item "4"    <4>  "A size 4 board is currently selected")
    (item "5"    <5>  "A size 5 board is currently selected")*
    (item "6"    <6>  "A size 6 board is currently selected")
    (item "7"    <7>  "A size 7 board is currently selected")
    (item "8"    <8>  "A size 8 board is currently selected")
    }
)

//------------------------------------------------------------------------------

(metadata
    (info
        {
        (description "Elea is a simple unification game of pure placement invented by Michael Amundsen in May 2022. There cannot be a tie in Elea.")
        (rules "Players take turns placing a stone of their own color on any empty cell of a hexagonal grid of hexagons (a hexhex board). 
            The game is over when the board is full, and the player with the lower score wins. 
            Your score is 1 point per odd-sized group and 2 points even-sized group.
            
        In this implementation, you get -1 per odd-sized group and -2 per even-sized group, so the winner will be the player with the higher score.")
        (id "1986")
        (version "1.3.4")
        (classification "board/space/group")
        (author "Michael Amundsen")
        (credit "Michael Amundsen")
        (date "2022")
        }
    )
    (graphics {
        (player Colour P1 (colour Black))
        (player Colour P2 (colour White))
        (piece Colour state:0 strokeColour:(colour Black))
        (piece Colour state:1 strokeColour:(colour Red))
        (region Colour (sites Board) (colour 250 210 148))
        (board Colour InnerEdges (colour 178 151 100))
        (board Colour OuterEdges (colour 178 151 100))
    })
    (ai
        (bestAgent "MC-GRAVE")
    )
)
